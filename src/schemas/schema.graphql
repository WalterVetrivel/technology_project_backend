# import User from "user.graphql"
# import Event from "event.graphql"
# import Registration from "registration.graphql"
# import Invitation from "invitation.graphql"
# import Post from "post.graphql"
# import Comment from "comment.graphql"

type Query {
	user(id: ID!): User!
	users(query: QueryUserInput, first: Int, skip: Int): [User!]!
	event(id: ID!): Event!
	events(
		query: QueryEventInput
		first: Int
		skip: Int
		orderBy: String
	): [Event!]!
	eventPosts(eventId: ID!, first: Int, skip: Int, orderBy: String): [Post!]!
	followingEvents(
		dateAfter: String
		registrationAfter: String
		first: Int
	): [Event!]!
	registrations(
		event: ID
		user: ID
		first: Int
		skip: Int
		orderBy: String
	): [Registration!]!
	userRegistrations(first: Int, skip: Int, orderBy: String): [Registration!]!
	eventRegistrations(
		event: ID!
		first: Int
		skip: Int
		orderBy: String
	): [Registration!]!
	isRegistered(eventId: ID!): Boolean!
	isFollowing(userId: ID!): Boolean!
	currentUser: User!
}

type Mutation {
	login(data: AuthInput!): AuthPayload!
	createUser(data: CreateUserInput!): AuthPayload!
	updateUser(data: UpdateUserInput!): User!
	deleteUser: User!
	followUser(followingId: ID!): String!
	unfollowUser(followingId: ID!): String!
	createEvent(data: CreateEventInput!): Event!
	updateEvent(id: ID!, data: UpdateEventInput!): Event!
	deleteEvent(id: ID!): Event!
	createRegistration(data: CreateRegistrationInput!): Registration!
	deleteRegistration(id: ID!): Registration!
	createPost(data: CreatePostInput!): Post!
	updatePost(id: ID!, data: UpdatePostInput!): Post!
	deletePost(id: ID!): Post!
	createComment(data: CreateCommentInput!): Comment!
	updateComment(id: ID!, data: UpdateCommentInput!): Comment!
	deleteComment(id: ID!): Comment!
	createInvitation(data: CreateInvitationInput!): Invitation!
}

type AuthPayload {
	user: User!
	token: String!
}

input AuthInput {
	email: String!
	password: String!
}

input LogoutInput {
	email: String!
}

input QueryEventInput {
	creator: ID
	notBy: ID
	search: String
	category: String
	location: String
	isFree: Boolean
	isPaid: Boolean
	maxPrice: Float
	dateAfter: String
	registrationAfter: String
}

input QueryUserInput {
	name: String
	location: String
	eventsHosted: Boolean
}

input CreateUserInput {
	firstName: String!
	lastName: String!
	dateOfBirth: String!
	email: String!
	password: String!
	city: String!
	state: String!
	country: String!
}

input CreateEventInput {
	title: String!
	description: String!
	price: Float!
	category: String!
	dateTime: String!
	registrationDeadline: String!
	address: String!
	city: String!
	postCode: String!
	state: String!
	country: String!
	imageUrl: String
	paymentInfo: String!
}

input CreateRegistrationInput {
	event: ID!
	guestCount: Int!
	paymentInfo: String
}

input CreatePostInput {
	event: ID!
	content: String!
}

input CreateCommentInput {
	post: ID!
	content: String!
}

input CreateInvitationInput {
	receiver: ID!
	event: ID!
}

input UpdateUserInput {
	firstName: String
	lastName: String
	dateOfBirth: String
	email: String
	password: String
	country: String
	state: String
	city: String
}

input UpdateEventInput {
	title: String
	description: String
	address: String
	dateTime: String
	registrationDeadline: String
	price: Float
}

input UpdateRegistrationInput {
	guestCount: Int!
}

input UpdatePostInput {
	content: String!
}

input UpdateCommentInput {
	content: String!
}
